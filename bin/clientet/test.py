#!/usr/bin/env python3
"""
Script de test para GPIO con rel√©s.

Activa un pin GPIO de forma repetitiva para probar su funcionamiento.
Incluye delay inicial opcional para permitir que el rel√© se estabilice
antes de activar la carga (√∫til para motores DC).

Uso:
    python3 test.py <pin> <duracion_ms> <pausa_ms> [delay_inicial_ms]

Ejemplos:
    python3 test.py 17 100 300
    python3 test.py 17 150 500 30
    
    Esto activar√° el GPIO 17:
    - HIGH
    - Espera delay_inicial_ms (si se especifica)
    - Activo durante duracion_ms
    - LOW
    - Pausa durante pausa_ms
    - Repetir hasta Ctrl+C
"""
import sys
import time
import signal

try:
    import RPi.GPIO as GPIO
    GPIO_AVAILABLE = True
except ImportError:
    GPIO_AVAILABLE = False
    print("‚ö†Ô∏è  RPi.GPIO no disponible - ejecutando en modo simulaci√≥n")


def signal_handler(sig, frame):
    """Maneja Ctrl+C para salir limpiamente."""
    print("\n\nüëã Detenido por el usuario")
    print("üßπ Limpiando GPIO...")
    if GPIO_AVAILABLE:
        GPIO.cleanup()
    print("‚úÖ GPIO limpiado")
    sys.exit(0)


def test_gpio(pin: int, duration_ms: int, pause_ms: int, initial_delay_ms: int = 0):
    """
    Test de GPIO con activaciones repetidas.
    
    Args:
        pin: N√∫mero de pin GPIO (BCM)
        duration_ms: Tiempo en HIGH en milisegundos
        pause_ms: Tiempo en LOW en milisegundos
        initial_delay_ms: Delay despu√©s de HIGH antes de contar duraci√≥n (para rel√©s)
    """
    duration_s = duration_ms / 1000.0
    pause_s = pause_ms / 1000.0
    initial_delay_s = initial_delay_ms / 1000.0
    
    print("=" * 60)
    print("Test de GPIO con Rel√©s")
    print("=" * 60)
    print(f"Pin GPIO (BCM): {pin}")
    print(f"Duraci√≥n HIGH: {duration_ms}ms ({duration_s:.3f}s)")
    print(f"Pausa LOW: {pause_ms}ms ({pause_s:.3f}s)")
    if initial_delay_ms > 0:
        print(f"Delay inicial: {initial_delay_ms}ms ({initial_delay_s:.3f}s)")
        print(f"  ‚ö° √ötil para permitir que el rel√© se estabilice antes de la carga")
    print(f"Modo: {'REAL' if GPIO_AVAILABLE else 'SIMULACI√ìN'}")
    print(f"\nPresiona Ctrl+C para detener")
    print("=" * 60)
    print()
    
    # Configurar GPIO
    if GPIO_AVAILABLE:
        GPIO.setwarnings(False)
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(pin, GPIO.OUT)
        GPIO.output(pin, GPIO.LOW)
        print(f"‚úÖ GPIO {pin} configurado como OUTPUT (LOW)")
    else:
        print(f"üîß [SIM] GPIO {pin} configurado como OUTPUT (LOW)")
    
    print()
    print("Iniciando ciclo de activaci√≥n...")
    print("-" * 60)
    print()
    
    # Registrar manejador de se√±al para Ctrl+C
    signal.signal(signal.SIGINT, signal_handler)
    
    cycle = 0
    
    try:
        while True:
            cycle += 1
            start_time = time.time()
            
            # Activar (HIGH)
            if GPIO_AVAILABLE:
                GPIO.output(pin, GPIO.HIGH)
                if initial_delay_ms > 0:
                    print(f"üîå Ciclo #{cycle}: Pin {pin} ‚Üí HIGH")
                else:
                    print(f"üîå Ciclo #{cycle}: Pin {pin} ‚Üí HIGH (por {duration_ms}ms)")
            else:
                if initial_delay_ms > 0:
                    print(f"üîå [SIM] Ciclo #{cycle}: Pin {pin} ‚Üí HIGH")
                else:
                    print(f"üîå [SIM] Ciclo #{cycle}: Pin {pin} ‚Üí HIGH (por {duration_ms}ms)")
            
            # Delay inicial (para estabilizaci√≥n de rel√©)
            if initial_delay_ms > 0:
                print(f"   ‚è±Ô∏è  Esperando estabilizaci√≥n del rel√©: {initial_delay_ms}ms...")
                time.sleep(initial_delay_s)
                print(f"   ‚ö° Carga activa por {duration_ms}ms")
            
            # Esperar duraci√≥n
            time.sleep(duration_s)
            
            # Desactivar (LOW)
            if GPIO_AVAILABLE:
                GPIO.output(pin, GPIO.LOW)
            
            actual_duration = (time.time() - start_time) * 1000
            print(f"   Pin {pin} ‚Üí LOW (estuvo {actual_duration:.1f}ms total)")
            
            # Pausa antes del siguiente ciclo
            print(f"   üí§ Esperando {pause_ms}ms...")
            time.sleep(pause_s)
            
    except KeyboardInterrupt:
        # Este bloque no deber√≠a ejecutarse si signal_handler funciona
        # pero lo dejamos por si acaso
        signal_handler(None, None)


def main():
    """Punto de entrada principal."""
    if len(sys.argv) not in [4, 5]:
        print("‚ùå Error: N√∫mero incorrecto de argumentos")
        print()
        print("Uso:")
        print(f"    python3 {sys.argv[0]} <pin> <duracion_ms> <pausa_ms> [delay_inicial_ms]")
        print()
        print("Ejemplos:")
        print(f"    python3 {sys.argv[0]} 17 100 300")
        print(f"    python3 {sys.argv[0]} 17 150 500 30")
        print()
        print("Argumentos:")
        print("    pin              : N√∫mero de pin GPIO (modo BCM)")
        print("    duracion_ms      : Tiempo activo en milisegundos")
        print("    pausa_ms         : Tiempo en pausa en milisegundos")
        print("    delay_inicial_ms : (Opcional) Delay tras HIGH antes de contar duraci√≥n")
        print()
        print("Descripci√≥n:")
        print("    Activa el pin GPIO de forma repetitiva:")
        print("    HIGH ‚Üí [delay inicial] ‚Üí espera duraci√≥n ‚Üí LOW ‚Üí pausa ‚Üí repetir")
        print()
        print("Delay inicial (√∫til para rel√©s con motores):")
        print("    Permite que el rel√© se estabilice antes de que la carga se active.")
        print("    Valores t√≠picos: 20-50ms")
        print()
        print("Para detener:")
        print("    Presiona Ctrl+C")
        print()
        sys.exit(1)
    
    try:
        pin = int(sys.argv[1])
        duration_ms = int(sys.argv[2])
        pause_ms = int(sys.argv[3])
        initial_delay_ms = int(sys.argv[4]) if len(sys.argv) == 5 else 0
    except ValueError as e:
        print(f"‚ùå Error: Los argumentos deben ser n√∫meros enteros")
        print(f"   {e}")
        sys.exit(1)
    
    # Validaciones
    if pin < 0 or pin > 27:
        print(f"‚ùå Error: Pin {pin} fuera de rango (debe ser 0-27)")
        sys.exit(1)
    
    if duration_ms < 1:
        print(f"‚ùå Error: Duraci√≥n debe ser mayor a 0ms")
        sys.exit(1)
    
    if pause_ms < 0:
        print(f"‚ùå Error: Pausa no puede ser negativa")
        sys.exit(1)
    
    if initial_delay_ms < 0:
        print(f"‚ùå Error: Delay inicial no puede ser negativo")
        sys.exit(1)
    
    # Ejecutar test
    test_gpio(pin, duration_ms, pause_ms, initial_delay_ms)


if __name__ == '__main__':
    main()
